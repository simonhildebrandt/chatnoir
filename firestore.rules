rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function inviteForCreatedChat() {
      let chat = get(/databases/$(database)/documents/chats/$(resource.data.chatId));
      return chat.data.creator == request.auth.uid;
    }

    function invitedUser(inviteId) {
      return inviteId == request.auth.uid;
    }

    // function chatById(id) {
    //   return get(/databases/$(database)/documents/chats/$(id));
    // }

    function creatorOrInvited(uid, chat, chatId) {
      let isCreator = (uid == chat.data.creator);
      let invite = get(/databases/$(database)/documents/invites/$(uid));
      let invited = exists(/databases/$(database)/documents/invites/$(uid)) && (invite.data.chatId == chatId);
      // return isCreator;
      return isCreator || invited;
    }

    function creatorOrInvitedByChatId(uid, chatId) {
      let chat = get(/databases/$(database)/documents/chats/$(chatId));
      return creatorOrInvited(uid, chat, chatId)
    }

    match /chats/{chatId} {
      allow list, get: if request.auth != null && creatorOrInvited(request.auth.uid, resource, chatId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creator;

      match /messages/{messageId} {
        allow list, get, create: if request.auth != null && creatorOrInvitedByChatId(request.auth.uid, chatId);
      }
    }

    match /invites/{inviteId} {
      allow list, get: if request.auth != null && (inviteForCreatedChat() || invitedUser(inviteId));
      allow create: if request.auth != null;
    }
  }
}

//  allow list, get: if request.auth != null && request.auth.uid == resource.data.creator;
